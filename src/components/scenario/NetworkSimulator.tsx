import { useMemo, useState } from 'react';
import { useOperatorStore } from '../../store';

const formatLatency = (latency: number) => `${latency.toFixed(1)} ms`;

export const NetworkSimulator = () => {
  const { nodes, consensus, incidents, scenarioPlayer, trustMetrics } = useOperatorStore((state) => ({
    nodes: state.networkNodes,
    consensus: state.consensus,
    incidents: state.incidents.slice(0, 4),
    scenarioPlayer: state.scenarioPlayer,
    trustMetrics: state.trustMetrics,
  }));

  const [selectedNodeId, setSelectedNodeId] = useState<string | null>(null);
  const selectedNode = useMemo(
    () => nodes.find((node) => node.id === selectedNodeId) ?? nodes[0],
    [nodes, selectedNodeId],
  );

  const networkTrust = trustMetrics[0];

  return (
    <section className="network-simulator">
      <header>
        <h3>Network topology</h3>
        <span>
          Inspect node health, latency, and consensus participation while the simulation adjusts trust scores and
          orchestrates partition recovery drills.
        </span>
      </header>

      <div className="network-simulator__overview">
        <div className="consensus-summary" title="Current consensus leader and health">
          <span>Leader</span>
          <strong>{consensus.leader}</strong>
          <small>{`${consensus.algorithm} · Height ${consensus.height.toLocaleString()}`}</small>
          <small>{`Commit rate ${(consensus.commitRate * 100).toFixed(1)}% · Finality ${consensus.finalitySeconds.toFixed(1)}s`}</small>
        </div>
        <div className="trust-summary" title="Aggregated trust score for the simulated network">
          <span>Network trust</span>
          <strong>{networkTrust ? networkTrust.score.toFixed(0) : '—'}</strong>
          <small>
            {networkTrust
              ? `Trend ${(networkTrust.trend[networkTrust.trend.length - 1]?.value ?? networkTrust.score).toFixed(0)}`
              : 'Trust metrics loading'}
          </small>
        </div>
        <div className="scenario-highlight" title="Scenario playback context">
          <span>Scenario</span>
          <strong>{scenarioPlayer.activeScenarioId ?? 'None selected'}</strong>
          <small>{`Status: ${scenarioPlayer.status}`}</small>
        </div>
      </div>

      <div className="network-simulator__layout">
        <aside>
          <h4>Nodes</h4>
          <ul>
            {nodes.map((node) => (
              <li key={node.id}>
                <button
                  type="button"
                  className={`node-chip node-${node.status}`}
                  onClick={() => setSelectedNodeId(node.id)}
                  title={`Latency ${formatLatency(node.latencyMs)} · Reputation ${node.reputation.toFixed(1)}`}
                >
                  <strong>{node.label}</strong>
                  <span>{node.role}</span>
                  <small>{formatLatency(node.latencyMs)}</small>
                </button>
              </li>
            ))}
          </ul>
        </aside>
        <article>
          {selectedNode ? (
            <div className="node-detail">
              <header>
                <h4>{selectedNode.label}</h4>
                <span>{selectedNode.role}</span>
              </header>
              <dl>
                <div>
                  <dt>Status</dt>
                  <dd>{selectedNode.status}</dd>
                </div>
                <div>
                  <dt>Latency</dt>
                  <dd>{formatLatency(selectedNode.latencyMs)}</dd>
                </div>
                <div>
                  <dt>Reputation</dt>
                  <dd>{selectedNode.reputation.toFixed(2)}</dd>
                </div>
                <div>
                  <dt>Consensus weight</dt>
                  <dd>{selectedNode.consensusWeight.toFixed(2)}</dd>
                </div>
                <div>
                  <dt>Connections</dt>
                  <dd>{selectedNode.connections.join(', ') || '—'}</dd>
                </div>
                <div>
                  <dt>Region</dt>
                  <dd>{selectedNode.region}</dd>
                </div>
              </dl>
            </div>
          ) : (
            <p className="placeholder">Select a node to inspect runtime details.</p>
          )}
        </article>
      </div>

      <section className="network-simulator__incidents">
        <header>
          <h4>Recent incidents</h4>
          <span>Generated by the realtime simulation hook.</span>
        </header>
        {incidents.length === 0 ? (
          <p className="placeholder">No incidents at this moment.</p>
        ) : (
          <ul>
            {incidents.map((incident) => (
              <li key={incident.id} className={`incident incident-${incident.severity}`}>
                <strong>{incident.description}</strong>
                <span>{incident.remediation}</span>
              </li>
            ))}
          </ul>
        )}
      </section>
    </section>
  );
};

export default NetworkSimulator;

